name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule: # nightly full matrix
    - cron: '0 2 * * *'  # 2 AM UTC

jobs:
  fast-build:
    if: github.event_name != 'schedule'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        build-type: [release]  # Only Release for fast CI
        tracy: [ON]            # Only test TRACY ON in fast CI
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache CMake build
        uses: actions/cache@v3
        with:
          path: build
          key: ${{ runner.os }}-cmake-${{ matrix.build-type }}-${{ matrix.tracy }}-v1

      # --- Linux dependencies ---
      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build g++ clang \
               libgl1-mesa-dev xorg-dev \
               libwayland-dev wayland-protocols extra-cmake-modules \
               libxkbcommon-dev sccache

      # --- Windows dependencies ---
      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' --yes
          choco install ninja --yes
          choco install sccache --yes
          setx SCCACHE_DIR "%USERPROFILE%\.cache\sccache"
        shell: powershell

      # --- Configure CMake ---
      - name: Configure CMake (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          for /f "usebackq tokens=*" %%i in (`"C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath`) do set InstallDir=%%i
          call "%InstallDir%\VC\Auxiliary\Build\vcvarsall.bat" x64
          cmake --preset ${{ matrix.build-type }} -DTRACY_ENABLE=${{ matrix.tracy }}

      - name: Configure CMake (Linux)
        if: runner.os == 'Linux'
        run: cmake --preset ${{ matrix.build-type }} -DTRACY_ENABLE=${{ matrix.tracy }}

    
# Build step for Windows
      - name: Build (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvarsall.bat" x64
          cmake --build --preset ${{ matrix.build-type }} -- -j %NUMBER_OF_PROCESSORS%

# Build step for Linux
      - name: Build (Linux)
        if: runner.os == 'Linux'
        run: cmake --build --preset ${{ matrix.build-type }}


      - name: Show sccache stats (Windows)
        if: matrix.os == 'windows-latest'
        run: sccache --show-stats
        shell: cmd


      - name: Show sccache stats (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sccache --show-stats




  full-matrix:
    if: github.event_name == 'schedule'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        build-type: [debug, release]
        tracy: [OFF, ON]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache CMake build
        uses: actions/cache@v3
        with:
          path: build
          key: ${{ runner.os }}-cmake-${{ matrix.build-type }}-${{ matrix.tracy }}-v1

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build g++ clang \
               libgl1-mesa-dev xorg-dev \
               libwayland-dev wayland-protocols extra-cmake-modules \
               libxkbcommon-dev sccache

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' --yes
          choco install ninja --yes
          choco install sccache --yes
          setx SCCACHE_DIR "%USERPROFILE%\.cache\sccache"
        shell: powershell

# Configure CMake (Windows)
      - name: Configure CMake (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          for /f "usebackq tokens=*" %%i in (`"C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath`) do set InstallDir=%%i
          call "%InstallDir%\VC\Auxiliary\Build\vcvarsall.bat" x64
          cmake --preset ${{ matrix.build-type }} -DTRACY_ENABLE=${{ matrix.tracy }}

# Configure CMake (Linux)
      - name: Configure CMake (Linux)
        if: runner.os == 'Linux'
        run: cmake --preset ${{ matrix.build-type }} -DTRACY_ENABLE=${{ matrix.tracy }}


# Build step for Windows
      - name: Build (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvarsall.bat" x64
          cmake --build --preset ${{ matrix.build-type }} -- -j %NUMBER_OF_PROCESSORS%

# Build step for Linux
      - name: Build (Linux)
        if: runner.os == 'Linux'
        run: cmake --build --preset ${{ matrix.build-type }}


      - name: Show sccache stats (Windows)
        if: matrix.os == 'windows-latest'
        run: sccache --show-stats
        shell: cmd


      - name: Show sccache stats (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sccache --show-stats
