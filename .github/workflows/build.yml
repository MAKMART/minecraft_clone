name: Build

on:
  push:
    branches: [ main ]
    tags: ["v*"]   # trigger on tags like v1.0.0
  pull_request:
    branches: [ main ]
  schedule: # nightly full matrix
    - cron: '0 2 * * *'  # 2 AM UTC

jobs:
  fast-build:
    if: startsWith(github.ref, 'refs/heads/main') && !startsWith(github.ref, 'refs/tags/v')
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        build-type: [release]  # Only Release for fast CI
        tracy: [ON]            # Only test TRACY ON in fast CI
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache CMake build
        uses: actions/cache@v3
        with:
          path: build
          key: ${{ runner.os }}-cmake-${{ matrix.build-type }}-${{ matrix.tracy }}-v1

      # --- Linux dependencies ---
      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build g++ clang \
               libgl1-mesa-dev xorg-dev \
               libwayland-dev wayland-protocols extra-cmake-modules \
               libxkbcommon-dev sccache
   
      - name: Configure CMake (Linux)
        if: runner.os == 'Linux'
        run: cmake --preset ${{ matrix.build-type }} -DTRACY_ENABLE=${{ matrix.tracy }}

# Build step for Linux
      - name: Build (Linux)
        if: runner.os == 'Linux'
        run: cmake --build --preset ${{ matrix.build-type }}

      - name: Show sccache stats (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sccache --show-stats


  full-matrix:
    if: github.event_name == 'schedule'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        build-type: [debug, release]
        tracy: [OFF, ON]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache CMake build
        uses: actions/cache@v3
        with:
          path: build
          key: ${{ runner.os }}-cmake-${{ matrix.build-type }}-${{ matrix.tracy }}-v1

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build g++ clang \
               libgl1-mesa-dev xorg-dev \
               libwayland-dev wayland-protocols extra-cmake-modules \
               libxkbcommon-dev sccache

# Configure CMake (Linux)
      - name: Configure CMake (Linux)
        if: runner.os == 'Linux'
        run: cmake --preset ${{ matrix.build-type }} -DTRACY_ENABLE=${{ matrix.tracy }}

# Build step for Linux
      - name: Build (Linux)
        if: runner.os == 'Linux'
        run: cmake --build --preset ${{ matrix.build-type }}

      - name: Show sccache stats (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sccache --show-stats


  release-build:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        build-type: [release, debug]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build g++ clang \
               libgl1-mesa-dev xorg-dev \
               libwayland-dev wayland-protocols extra-cmake-modules \
               libxkbcommon-dev

      - name: Configure CMake
        run: cmake --preset ${{ matrix.build-type }}

      - name: Build
        run: cmake --build --preset ${{ matrix.build-type }}

      - name: Package build
        run: |
          mkdir -p artifacts/${{ matrix.build-type }}
          cp -r build/${{ matrix.build-type }}/* artifacts/${{ matrix.build-type }}/
          cp README.md LICENSE artifacts/${{ matrix.build-type }}/ || true


      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mygame-${{ matrix.build-type }}
          path: artifacts/${{ matrix.build-type }}

  publish-release:
    needs: release-build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: mygame-release
          path: ./Release
      - uses: actions/download-artifact@v4
        with:
          name: mygame-debug
          path: ./Debug

      - name: Create zips
        id: package
        run: |
          exe_name="game"   # <-- must match your add_executable()
          version="${GITHUB_REF_NAME}"  # e.g., v1.0.0
          platform="${RUNNER_OS,,}"    # lowercase OS name
          
          zip -r ${exe_name}-${version}-${platform}-release.zip Release/*
          zip -r ${exe_name}-${version}-${platform}-debug.zip Debug/*

          echo "exe_name=${exe_name}" >> $GITHUB_OUTPUT
          echo "version=${version}" >> $GITHUB_OUTPUT
          echo "platform=${platform}" >> $GITHUB_OUTPUT

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ steps.package.outputs.exe_name }}-${{ steps.package.outputs.version }}-${{ steps.package.outputs.platform }}-release.zip
            ${{ steps.package.outputs.exe_name }}-${{ steps.package.outputs.version }}-${{ steps.package.outputs.platform }}-debug.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

